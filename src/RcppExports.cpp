// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// exponential_isotropic
arma::mat exponential_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_exponential_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(exponential_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// d_exponential_isotropic
arma::cube d_exponential_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_d_exponential_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(d_exponential_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// matern_isotropic
arma::mat matern_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_matern_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(matern_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// d_matern_isotropic
arma::cube d_matern_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_d_matern_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(d_matern_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// matern15_isotropic
arma::mat matern15_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_matern15_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(matern15_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// d_matern15_isotropic
arma::cube d_matern15_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_d_matern15_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(d_matern15_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_matern_isotropic
arma::mat rcpp_matern_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_rcpp_matern_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_matern_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_d_matern_isotropic
arma::cube rcpp_d_matern_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_rcpp_d_matern_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_d_matern_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_matern15_isotropic
arma::mat rcpp_matern15_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_rcpp_matern15_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_matern15_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_d_matern15_isotropic
arma::cube rcpp_d_matern15_isotropic(arma::vec covparms, arma::mat locs);
RcppExport SEXP _spSGMCMC_rcpp_d_matern15_isotropic(SEXP covparmsSEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_d_matern15_isotropic(covparms, locs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_kernel_sexp
arma::mat rcpp_kernel_sexp(const arma::mat& M, const arma::mat& N, const double l, const double s, const bool equal_matrices);
RcppExport SEXP _spSGMCMC_rcpp_kernel_sexp(SEXP MSEXP, SEXP NSEXP, SEXP lSEXP, SEXP sSEXP, SEXP equal_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const bool >::type equal_matrices(equal_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_kernel_sexp(M, N, l, s, equal_matrices));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_d_kernel_sexp_l
arma::mat rcpp_d_kernel_sexp_l(const arma::mat& M, const arma::mat& N, const double l, const double s, const bool equal_matrices);
RcppExport SEXP _spSGMCMC_rcpp_d_kernel_sexp_l(SEXP MSEXP, SEXP NSEXP, SEXP lSEXP, SEXP sSEXP, SEXP equal_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const bool >::type equal_matrices(equal_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_d_kernel_sexp_l(M, N, l, s, equal_matrices));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_d_kernel_sexp_s
arma::mat rcpp_d_kernel_sexp_s(const arma::mat& M, const arma::mat& N, const double l, const double s, const bool equal_matrices);
RcppExport SEXP _spSGMCMC_rcpp_d_kernel_sexp_s(SEXP MSEXP, SEXP NSEXP, SEXP lSEXP, SEXP sSEXP, SEXP equal_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const bool >::type equal_matrices(equal_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_d_kernel_sexp_s(M, N, l, s, equal_matrices));
    return rcpp_result_gen;
END_RCPP
}
// Linv_mult
NumericVector Linv_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _spSGMCMC_Linv_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(Linv_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// L_mult
NumericVector L_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _spSGMCMC_L_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(L_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// Linv_t_mult
NumericVector Linv_t_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _spSGMCMC_Linv_t_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(Linv_t_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// L_t_mult
NumericVector L_t_mult(NumericMatrix Linv, NumericVector z, IntegerMatrix NNarray);
RcppExport SEXP _spSGMCMC_L_t_mult(SEXP LinvSEXP, SEXP zSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(L_t_mult(Linv, z, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// vecchia_Linv
NumericMatrix vecchia_Linv(arma::vec covparms, StringVector covfun_name, arma::mat locs, arma::mat NNarray, int start_ind);
RcppExport SEXP _spSGMCMC_vecchia_Linv(SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP locsSEXP, SEXP NNarraySEXP, SEXP start_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< int >::type start_ind(start_indSEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_Linv(covparms, covfun_name, locs, NNarray, start_ind));
    return rcpp_result_gen;
END_RCPP
}
// beta_logpior
double beta_logpior(NumericVector& beta, double var);
RcppExport SEXP _spSGMCMC_beta_logpior(SEXP betaSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_logpior(beta, var));
    return rcpp_result_gen;
END_RCPP
}
// beta_grad_logprior
NumericVector beta_grad_logprior(NumericVector& beta, double var);
RcppExport SEXP _spSGMCMC_beta_grad_logprior(SEXP betaSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_grad_logprior(beta, var));
    return rcpp_result_gen;
END_RCPP
}
// matern_parms_logprior
NumericVector matern_parms_logprior(NumericVector& covparms, NumericMatrix& prior_params);
RcppExport SEXP _spSGMCMC_matern_parms_logprior(SEXP covparmsSEXP, SEXP prior_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type prior_params(prior_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(matern_parms_logprior(covparms, prior_params));
    return rcpp_result_gen;
END_RCPP
}
// matern_parms_prior_grad
NumericVector matern_parms_prior_grad(NumericVector& covparms, NumericMatrix& prior_params);
RcppExport SEXP _spSGMCMC_matern_parms_prior_grad(SEXP covparmsSEXP, SEXP prior_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type prior_params(prior_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(matern_parms_prior_grad(covparms, prior_params));
    return rcpp_result_gen;
END_RCPP
}
// parms_link
NumericVector parms_link(NumericVector& covparms);
RcppExport SEXP _spSGMCMC_parms_link(SEXP covparmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type covparms(covparmsSEXP);
    rcpp_result_gen = Rcpp::wrap(parms_link(covparms));
    return rcpp_result_gen;
END_RCPP
}
// parms_invlink
NumericVector parms_invlink(NumericVector& logparms);
RcppExport SEXP _spSGMCMC_parms_invlink(SEXP logparmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type logparms(logparmsSEXP);
    rcpp_result_gen = Rcpp::wrap(parms_invlink(logparms));
    return rcpp_result_gen;
END_RCPP
}
// parms_link_grad
NumericVector parms_link_grad(NumericVector& covparms);
RcppExport SEXP _spSGMCMC_parms_link_grad(SEXP covparmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type covparms(covparmsSEXP);
    rcpp_result_gen = Rcpp::wrap(parms_link_grad(covparms));
    return rcpp_result_gen;
END_RCPP
}
// parms_invlink_grad
NumericVector parms_invlink_grad(NumericVector& logparms);
RcppExport SEXP _spSGMCMC_parms_invlink_grad(SEXP logparmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type logparms(logparmsSEXP);
    rcpp_result_gen = Rcpp::wrap(parms_invlink_grad(logparms));
    return rcpp_result_gen;
END_RCPP
}
// transformed_matern_parms_logprior
NumericVector transformed_matern_parms_logprior(NumericVector& logparms, NumericMatrix& prior_params);
RcppExport SEXP _spSGMCMC_transformed_matern_parms_logprior(SEXP logparmsSEXP, SEXP prior_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type logparms(logparmsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type prior_params(prior_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(transformed_matern_parms_logprior(logparms, prior_params));
    return rcpp_result_gen;
END_RCPP
}
// transformed_matern_parms_logprior_grad
NumericVector transformed_matern_parms_logprior_grad(NumericVector& logparms, NumericMatrix& prior_params);
RcppExport SEXP _spSGMCMC_transformed_matern_parms_logprior_grad(SEXP logparmsSEXP, SEXP prior_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type logparms(logparmsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type prior_params(prior_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(transformed_matern_parms_logprior_grad(logparms, prior_params));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _spSGMCMC_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// vecchia_profbeta_loglik_grad_info
List vecchia_profbeta_loglik_grad_info(IntegerVector batch_id, NumericVector covparms, StringVector covfun_name, NumericVector& y, NumericMatrix& X, NumericVector current_beta, const NumericMatrix& locs, NumericMatrix& NNarray);
RcppExport SEXP _spSGMCMC_vecchia_profbeta_loglik_grad_info(SEXP batch_idSEXP, SEXP covparmsSEXP, SEXP covfun_nameSEXP, SEXP ySEXP, SEXP XSEXP, SEXP current_betaSEXP, SEXP locsSEXP, SEXP NNarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type batch_id(batch_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type current_beta(current_betaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type NNarray(NNarraySEXP);
    rcpp_result_gen = Rcpp::wrap(vecchia_profbeta_loglik_grad_info(batch_id, covparms, covfun_name, y, X, current_beta, locs, NNarray));
    return rcpp_result_gen;
END_RCPP
}
// reparameterized_quantities
void reparameterized_quantities(NumericVector& cov_params, NumericVector& grad, NumericMatrix& info, NumericVector& grad_phi, NumericVector& info_phi);
RcppExport SEXP _spSGMCMC_reparameterized_quantities(SEXP cov_paramsSEXP, SEXP gradSEXP, SEXP infoSEXP, SEXP grad_phiSEXP, SEXP info_phiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type cov_params(cov_paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type grad_phi(grad_phiSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type info_phi(info_phiSEXP);
    reparameterized_quantities(cov_params, grad, info, grad_phi, info_phi);
    return R_NilValue;
END_RCPP
}
// SGRLD_step
NumericVector SGRLD_step(double epsilon, NumericMatrix& info, NumericVector& cov_params, NumericVector& grad);
RcppExport SEXP _spSGMCMC_SGRLD_step(SEXP epsilonSEXP, SEXP infoSEXP, SEXP cov_paramsSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type cov_params(cov_paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(SGRLD_step(epsilon, info, cov_params, grad));
    return rcpp_result_gen;
END_RCPP
}
// SGRLD_loop
List SGRLD_loop(NumericVector& y, NumericMatrix& X, NumericMatrix& NNarray, StringVector covfun_name, NumericMatrix& locs, NumericVector beta_0, NumericVector covparams0, NumericMatrix prior_params, IntegerVector& indexes, int n_epochs, int n_batch, int n_burn, double lr, int thin);
RcppExport SEXP _spSGMCMC_SGRLD_loop(SEXP ySEXP, SEXP XSEXP, SEXP NNarraySEXP, SEXP covfun_nameSEXP, SEXP locsSEXP, SEXP beta_0SEXP, SEXP covparams0SEXP, SEXP prior_paramsSEXP, SEXP indexesSEXP, SEXP n_epochsSEXP, SEXP n_batchSEXP, SEXP n_burnSEXP, SEXP lrSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covparams0(covparams0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_params(prior_paramsSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type n_batch(n_batchSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SGRLD_loop(y, X, NNarray, covfun_name, locs, beta_0, covparams0, prior_params, indexes, n_epochs, n_batch, n_burn, lr, thin));
    return rcpp_result_gen;
END_RCPP
}
// sample_pieces
List sample_pieces(IntegerVector batch_id, NumericMatrix NNarray, NumericVector covparms, NumericMatrix X, NumericVector y, NumericMatrix locs, StringVector covfun_name);
RcppExport SEXP _spSGMCMC_sample_pieces(SEXP batch_idSEXP, SEXP NNarraySEXP, SEXP covparmsSEXP, SEXP XSEXP, SEXP ySEXP, SEXP locsSEXP, SEXP covfun_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type batch_id(batch_idSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NNarray(NNarraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covparms(covparmsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type covfun_name(covfun_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_pieces(batch_id, NNarray, covparms, X, y, locs, covfun_name));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spSGMCMC_exponential_isotropic", (DL_FUNC) &_spSGMCMC_exponential_isotropic, 2},
    {"_spSGMCMC_d_exponential_isotropic", (DL_FUNC) &_spSGMCMC_d_exponential_isotropic, 2},
    {"_spSGMCMC_matern_isotropic", (DL_FUNC) &_spSGMCMC_matern_isotropic, 2},
    {"_spSGMCMC_d_matern_isotropic", (DL_FUNC) &_spSGMCMC_d_matern_isotropic, 2},
    {"_spSGMCMC_matern15_isotropic", (DL_FUNC) &_spSGMCMC_matern15_isotropic, 2},
    {"_spSGMCMC_d_matern15_isotropic", (DL_FUNC) &_spSGMCMC_d_matern15_isotropic, 2},
    {"_spSGMCMC_rcpp_matern_isotropic", (DL_FUNC) &_spSGMCMC_rcpp_matern_isotropic, 2},
    {"_spSGMCMC_rcpp_d_matern_isotropic", (DL_FUNC) &_spSGMCMC_rcpp_d_matern_isotropic, 2},
    {"_spSGMCMC_rcpp_matern15_isotropic", (DL_FUNC) &_spSGMCMC_rcpp_matern15_isotropic, 2},
    {"_spSGMCMC_rcpp_d_matern15_isotropic", (DL_FUNC) &_spSGMCMC_rcpp_d_matern15_isotropic, 2},
    {"_spSGMCMC_rcpp_kernel_sexp", (DL_FUNC) &_spSGMCMC_rcpp_kernel_sexp, 5},
    {"_spSGMCMC_rcpp_d_kernel_sexp_l", (DL_FUNC) &_spSGMCMC_rcpp_d_kernel_sexp_l, 5},
    {"_spSGMCMC_rcpp_d_kernel_sexp_s", (DL_FUNC) &_spSGMCMC_rcpp_d_kernel_sexp_s, 5},
    {"_spSGMCMC_Linv_mult", (DL_FUNC) &_spSGMCMC_Linv_mult, 3},
    {"_spSGMCMC_L_mult", (DL_FUNC) &_spSGMCMC_L_mult, 3},
    {"_spSGMCMC_Linv_t_mult", (DL_FUNC) &_spSGMCMC_Linv_t_mult, 3},
    {"_spSGMCMC_L_t_mult", (DL_FUNC) &_spSGMCMC_L_t_mult, 3},
    {"_spSGMCMC_vecchia_Linv", (DL_FUNC) &_spSGMCMC_vecchia_Linv, 5},
    {"_spSGMCMC_beta_logpior", (DL_FUNC) &_spSGMCMC_beta_logpior, 2},
    {"_spSGMCMC_beta_grad_logprior", (DL_FUNC) &_spSGMCMC_beta_grad_logprior, 2},
    {"_spSGMCMC_matern_parms_logprior", (DL_FUNC) &_spSGMCMC_matern_parms_logprior, 2},
    {"_spSGMCMC_matern_parms_prior_grad", (DL_FUNC) &_spSGMCMC_matern_parms_prior_grad, 2},
    {"_spSGMCMC_parms_link", (DL_FUNC) &_spSGMCMC_parms_link, 1},
    {"_spSGMCMC_parms_invlink", (DL_FUNC) &_spSGMCMC_parms_invlink, 1},
    {"_spSGMCMC_parms_link_grad", (DL_FUNC) &_spSGMCMC_parms_link_grad, 1},
    {"_spSGMCMC_parms_invlink_grad", (DL_FUNC) &_spSGMCMC_parms_invlink_grad, 1},
    {"_spSGMCMC_transformed_matern_parms_logprior", (DL_FUNC) &_spSGMCMC_transformed_matern_parms_logprior, 2},
    {"_spSGMCMC_transformed_matern_parms_logprior_grad", (DL_FUNC) &_spSGMCMC_transformed_matern_parms_logprior_grad, 2},
    {"_spSGMCMC_rcpp_hello_world", (DL_FUNC) &_spSGMCMC_rcpp_hello_world, 0},
    {"_spSGMCMC_vecchia_profbeta_loglik_grad_info", (DL_FUNC) &_spSGMCMC_vecchia_profbeta_loglik_grad_info, 8},
    {"_spSGMCMC_reparameterized_quantities", (DL_FUNC) &_spSGMCMC_reparameterized_quantities, 5},
    {"_spSGMCMC_SGRLD_step", (DL_FUNC) &_spSGMCMC_SGRLD_step, 4},
    {"_spSGMCMC_SGRLD_loop", (DL_FUNC) &_spSGMCMC_SGRLD_loop, 14},
    {"_spSGMCMC_sample_pieces", (DL_FUNC) &_spSGMCMC_sample_pieces, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_spSGMCMC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
